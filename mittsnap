#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset

VERBOSITY=3
DRYRUN=1
CONFIG="/etc/mittsnap.conf.sh"
LOCKFILE="/var/lock/mittsnap.pid"
LOGFILE="/var/log/mittsnap.log"


##################################################################
# Log output
##################################################################
exec 3>&2
exec 4>&2
readonly silent_lvl=0
readonly crt_lvl=1
readonly err_lvl=2
readonly wrn_lvl=3
readonly inf_lvl=4
readonly dbg_lvl=5

clr() {
    if [[ ! -t 3 ]]; then
        return 0
    fi
    case $1 in
        "none") echo -e "\033[0m" ;;
        "red") echo -e "\033[0;31m" ;;
        "green") echo -e "\033[0;32m" ;;
        "orange") echo -e "\033[0;33m" ;;
        "yellow") echo -e "\033[1;33m" ;;
        "blue") echo -e "\033[1;34m" ;;
        "purple") echo -e "\033[0;35m" ;;
        "cyan") echo -e "\033[0;36m" ;;
        "gray") echo -e "\033[1;30m" ;;
    esac
}
notify() { log $silent_lvl "NOTE: $1"; }
critical() { log $crt_lvl "$(clr red)CRITICAL: $(clr none)$1"; }
error() { log $err_lvl "$(clr orange)ERROR: $(clr none)$1"; }
warn() { log $wrn_lvl "$(clr yellow)WARNING: $(clr none)$1"; }
info() { log $inf_lvl "$(clr blue)INFO: $(clr none)$1"; }
debug() { log $dbg_lvl "$(clr gray) DEBUG: $1"; }
log() {
    if (( $VERBOSITY >= $1 )); then
        datestring=$(date +'%Y-%m-%d %H:%M:%S')
        echo "[$datestring] $2 $(clr none)" | fold -w80 -s | sed '2~1s/^/  /' >&3
    fi
}
command_log() {
    datestring=$(date +'%Y-%m-%d %H:%M:%S')
    echo "[$datestring] $1" >&4
}

runcmd() {
    debug "Running $@"
    command_log "$@"
    if [[ $DRYRUN == 0 ]]; then
        if (( $VERBOSITY >= $dbg_lvl )); then
            eval "$@" >&3
        else
            eval "$@" >/dev/null
        fi
    fi
}

##################################################################
# Filesystem management
##################################################################
is_subvolume() {
    if [[ $(stat -f --format=%T ${1}) != "btrfs" ]]; then
        return 1
    fi
    if [[ $(stat --format=%i ${1}) != 256 ]]; then
        return 1
    fi
    return 0
}
make_snapshot() {
    local src=$1
    local dst=$2

    runcmd "btrfs subvolume snapshot -r ${src} ${dst}" \
        || error "Snapshot of ${src} to ${dst} failed"
}
make_local_copy() {
    local src=${1}
    local dst=${2}

    local progress=""
    if (( $VERBOSITY >= $dbg_lvl )); then
        progress="--progress"
    fi

    local cmd="/usr/bin/rsync \
    -a --delete --numeric-ids --relative --delete-excluded \
    ${progress} \
    ${RSYNC_ARGUMENTS:-} \
    ${src} ${dst}"

    runcmd "${cmd//$'\n'/' '}"
}
make_ssh_copy() {
    local src=${1}
    local dst=${2}

    local progress=""
    if (( $VERBOSITY >= $dbg_lvl )); then
        progress="--progress"
    fi

    local cmd="/usr/bin/rsync \
    -a --delete --numeric-ids --relative --delete-excluded \
    ${progress} \
    ${RSYNC_ARGUMENTS:-} \
    --rsh='/usr/bin/ssh -o BatchMode=yes' \
    ${src} ${dst}"
    runcmd "${cmd//$'\n'/' '}"
}
make_script_copy() {
    local cmd=${1}
    local dst=${2}

    mkdir -p "${dst}"
    pushd "${dst}" > /dev/null
    runcmd "${cmd//$'\n'/' '}"
    popd > /dev/null
}

##################################################################
# Backup management
##################################################################
setup_backup() {
    local index=$1
    local dir=${BACKUP_ROOT}/${index}

    info "Preparing directory for ${index}."

    if [[ -d ${dir} ]]; then
        critical "${dir} already exists. Aborting"
        exit 1
    fi

    runcmd "mkdir -p ${dir}"
    runcmd "btrfs subvolume create ${dir}/local"
}
copy_backup() {
    local src_index=$1
    local dst_index=$2
    local src=${BACKUP_ROOT}/${src_index}
    local dst=${BACKUP_ROOT}/${dst_index}

    if [[ ! -d ${src} ]]; then
        debug "copy_backup: Source backup ${src_index} does not exist."
        return 1
    fi

    runcmd "mkdir -p ${dst}"
    for f in ${src}/*; do
        if ! is_subvolume ${f}; then
            critical "${f} is not a btrfs subvolume. Archive corrupted?"
            exit 1
        fi
        target=${dst}${f#${src}}
        make_snapshot "${f}" "${target}"
    done
}
move_backup() {
    local src_index=$1
    local dst_index=$2
    local src=${BACKUP_ROOT}/${src_index}
    local dst=${BACKUP_ROOT}/${dst_index}

    if [[ ! -d ${src} ]]; then
        debug "move_backup: Source backup ${src_index} does not exist."
        return 1
    fi

    runcmd "mv ${src}/ ${dst}"
}
remove_backup() {
    local index=$1
    local dir=${BACKUP_ROOT}/${index}

    if [[ ! -d ${dir} ]]; then
        debug "remove_backup: ${dir} does not exist."
        return 1
    fi

    for f in ${dir}/*; do
        if ! is_subvolume ${f}; then
            critical "${f} is not a btrfs subvolume. Archive corrupted?"
            exit 1
        fi
        runcmd "btrfs subvolume delete ${f}"
    done
    runcmd "rmdir ${dir}"
}

##################################################################
# Manage old backups
##################################################################
get_count() {
    local level=$1

    case ${level} in
        "hourly") echo "${KEEP_HOURLY-24}" ;;
        "daily") echo "${KEEP_DAILY-7}" ;;
        "weekly") echo "${KEEP_WEEKLY-5}" ;;
        "monthly") echo "${KEEP_MONTHLY-12}" ;;
        "yearly") echo "${KEEP_YEARLY-100}" ;;
        *) return 1 ;;
    esac
}
rotate_backups() {
    local level=$1

    local count=$(get_count "$level")

    info "Rotating ${level} backups"

    for (( i=${count}; i>= 0; i-- )); do
        if ((i == 0)) && [[ $level == "hourly" ]]; then
            copy_backup "${level}.${i}" "${level}.$((${i}+1))" || continue
        else
            move_backup "${level}.${i}" "${level}.$((${i}+1))" || continue
        fi
    done
}
prune_backups() {
    local level=$1
    local count=$(get_count "$level")

    info "Pruning ${level} backups"

    remove_backup "${level}.$(($(get_count "$level")+1))" || (debug "No need to prune $level"; return 0)
}

##################################################################
# Make new backups
##################################################################
make_backup_hourly() {
    info "Making a new hourly backup"

    local dstdir=${BACKUP_ROOT}/hourly.0/

    if [[ ! -d ${dstdir} ]]; then
        setup_backup hourly.0
    fi

    while IFS= read -r source; do
        if [[ -z "$source" ]]; then
            continue
        fi
        IFS=' ' read -ra l <<< $source
        local protocol=${l[0]}
        local src=${l[1]}
        local dst=${l[2]}
        debug "Protocol: ${protocol}, Source: ${src}, Destination: ${dst}"
        case ${protocol} in
            "snapshot")
                if is_subvolume "${dstdir}${dst}"; then
                    runcmd "btrfs subvolume delete ${dstdir}${dst}"
                fi
                make_snapshot "${src}" "${dstdir}${dst}"
                ;;
            "local")
                make_local_copy ${src} ${dstdir}local/${dst}
                ;;
            "ssh")
                make_ssh_copy ${src} ${dstdir}local/${dst}
                ;;
            "script")
                make_script_copy ${src} ${dstdir}local/${dst}
                ;;
            *)
                error "Unknown protocol: ${protocol} - ${source}"
                ;;
        esac
    done <<< $SOURCES
}
make_backup_daily() {
    info "Making a new daily backup"

    copy_backup "hourly.$(get_count hourly)" "daily.0" || (error "Cannot create daily backup."; exit 1)
}
make_backup_weekly() {
    info "Making a new weekly backup"

    copy_backup "daily.$(get_count daily)" "weekly.0" || (error "Cannot create weekly backup."; exit 1)
}
make_backup_monthly() {
    info "Making a new weekly backup"

    copy_backup "weekly.$(get_count weekly)" "monthly.0" || (error "Cannot create monthly backup."; exit 1)
}
make_backup() {
    local level=$1

    case ${level} in
        "hourly") make_backup_hourly ;;
        "daily") make_backup_daily ;;
        "weekly") make_backup_weekly ;;
        "monthly") make_backup_monthly ;;
        *) ;;
    esac
}


print_config() {
    echo "Mittsnap v0.0.1"
    echo "Thomas LovÃ©n 2021"
    echo ""
    echo "Configuration loaded from ${CONFIG}:"
    echo "DRYRUN=${DRYRUN}"
    echo "BACKUP_ROOT=${BACKUP_ROOT}"
    echo "VERBOSITY=${VERBOSITY}"
    echo "LOGFILE=${LOGFILE}"
    echo "RSYNC_ARGUMENTS=${RSYNC_ARGUMENTS}"
    echo "SOURCES=${SOURCES}"
}

main() {
    if [[ -z ${BACKUP_ROOT:-} ]]; then
        critical "BACKUP_ROOT undefined"
        exit 1
    fi
    if [[ -z ${SOURCES:-} ]]; then
        cricitcal "SOURCES undefined"
        exit 1
    fi

    local level=${1:-}

    if [[ ${DRYRUN} != 0 ]]; then
        info "Performing dry run. No file operations will be run."
    fi

    case ${level} in
        "init")
            info "Mittsnap setting up in ${BACKUP_ROOT}"
            setup_backup hourly.0
            exit 0
            ;;
        "remove")
            if [[ -z ${2:-} ]]; then
                error "Remove requires an index"
                usage
                exit 1
            fi
            remove_backup ${2}
            ;;
        "config")
            print_config
            exit 0
            ;;
        "hourly"|"daily"|"weekly"|"monthly")
            info "Mittsnap starting $level snapshot"

            prune_backups $level
            rotate_backups $level
            prune_backups $level
            make_backup $level
            exit 0
            ;;
        *)
            error "Unknown command $level"
            usage
            exit 1
            ;;
    esac
   
}

cleanup() {
    if [[ -f ${LOCKFILE} ]]; then
        pid=$(cat $LOCKFILE)
        if [[ $pid == $$ ]]; then
            runcmd "rm ${LOCKFILE}"
        fi
    fi
}


usage() {
    echo "Usage:"
    echo "  $0 [<OPTIONS>] <command>"
    echo "Options:"
    echo "  -h      : display this help message"
    echo "  -c FILE : read configuration from FILE"
    echo "  -q      : decrease verbosity (can be repeated: -qq, -qqq)"
    echo "  -v      : increase verbosity (can be repeated: -vv, -vvv)"
    echo "  -n      : Perform a dry run"
    echo "Commands:"
    echo "  hourly       : Perform a hourly backup"
    echo "  daily        : Perform a daily backup"
    echo "  weekly       : Perform a weekly backup"
    echo "  monthly      : Perform a monthly backup"
    echo "  init         : Initialize backup storage. Needs to be done before first daily backup."
    echo "  remove INDEX : Remove backup INDEX (e.g. weekly.2)"
    echo "  config       : Print out current configuration"
}


trap cleanup EXIT

opt_verbosity=0
opt_dryrun=0

while getopts "hqvnc:" opt; do
    case "$opt" in
        h) usage; exit 0 ;;
        q) (( opt_verbosity = opt_verbosity - 1)) ;;
        v) (( opt_verbosity = opt_verbosity + 1)) ;;
        n) opt_dryrun=1 ;;
        c) CONFIG=${OPTARG} ;;
        *) error "Invalid options: $1"; usage; exit 1 ;;
    esac
done
shift $((OPTIND-1))

if [[ ! -f ${CONFIG} ]]; then
    critical "Config file not found: ${CONFIG} "
    exit 1
fi
source ${CONFIG}

VERBOSITY=$((${VERBOSITY} + ${opt_verbosity}))
DRYRUN=$((${DRYRUN} + ${opt_dryrun}))

if [[ -n ${LOGFILE:-} ]]; then
    exec 4>${LOGFILE}
fi

if [[ -f ${LOCKFILE} ]]; then
    pid=$(cat $LOCKFILE)
    if ps -p ${pid} >/dev/null; then
        critical "Lockfile found (${LOCKFILE}) and PID is still running. Aborting"
        exit 1
    else
        warn "Lockfile found (${LOCKFILE}) but PID not running. Assumed stale. Removing."
        runcmd "rm ${LOCKFILE}"
    fi
fi

runcmd "echo $$ > ${LOCKFILE}"

main "$@"

cleanup
